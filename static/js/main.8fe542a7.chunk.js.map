{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","axios","get","result","this","data","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gYAQO,SAASA,EAAKC,GACnB,OACE,uBAAKC,UAAU,kBACb,uBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,mBAEN,0BAAKL,EAAMG,QAAQG,MACnB,yBAAIN,EAAMG,QAAQI,QCNjB,IAAMC,EAAW,SAACR,GACvB,OACE,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACzB,kBAACJ,EAAD,CAAMY,IAAKR,EAAQC,GAAID,QAASA,S,MCNjC,SAASS,EAAT,GAAoE,IAA/CC,EAA8C,EAA9CA,YAAaC,EAAiC,EAAjCA,aACvC,OACE,2BACE,yBACEb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,K,qBCyCHG,G,wDA1Cb,WAAYjB,GAAe,IAAD,8BACxB,cAAMA,IAgBRc,aAAe,SAACI,GACd,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAhBxB,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALS,E,gMAWHI,IAAMC,IACzB,8C,OADIC,E,OAGNC,KAAKR,SAAS,CAAEV,SAAUiB,EAAOE,O,qIASzB,IAAD,EAC2BD,KAAKJ,MAA/Bd,EADD,EACCA,SAAUW,EADX,EACWA,YACZS,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQG,KAAKyB,cAAcC,SAASZ,MAGtC,OACE,yBAAKnB,UAAU,OACb,gDACA,kBAACW,EAAD,CACEC,YAAY,qBACZC,aAAca,KAAKb,eAErB,kBAAC,EAAD,CAAUL,SAAUoB,S,GArCVI,cCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8fe542a7.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Monster } from '../../types/data-types';\nimport './card.styles.css';\n\ninterface Props {\n  monster: Monster;\n}\n\nexport function Card(props: Props) {\n  return (\n    <div className='card-container'>\n      <img\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        alt='monster avatar'\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Monster } from './../../types/data-types';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\n\ninterface Props {\n  monsters: Array<Monster>;\n}\n\nexport const CardList = (props: Props) => {\n  return (\n    <div className='card-list'>\n      {props.monsters.map(monster => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport './search-box.styles.css';\n\nexport interface ISearchBoxProps {\n  placeholder: string;\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport function SearchBox({ placeholder, handleChange }: ISearchBoxProps) {\n  return (\n    <div>\n      <input\n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n      />\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport { Monster } from './types/data-types';\nimport axios from 'axios';\nimport './App.css';\n\ninterface Props {}\ninterface State {\n  monsters: Array<Monster>;\n  searchField: string;\n}\n\nclass App extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n\n  }\n\n  async componentDidMount() {\n    const result = await axios.get(\n      'https://jsonplaceholder.typicode.com/users'\n    );\n    this.setState({ monsters: result.data });\n  }\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      searchField: e.target.value,\n    });\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField)\n    );\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='Search Monsters...'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}